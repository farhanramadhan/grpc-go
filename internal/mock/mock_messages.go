// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/messages/repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	messages "gitlab.warungpintar.co/farhan.ramadhan/onboard-service/internal/messages"
	reflect "reflect"
)

// MockMessageRepositoryInterface is a mock of MessageRepositoryInterface interface
type MockMessageRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryInterfaceMockRecorder
}

// MockMessageRepositoryInterfaceMockRecorder is the mock recorder for MockMessageRepositoryInterface
type MockMessageRepositoryInterfaceMockRecorder struct {
	mock *MockMessageRepositoryInterface
}

// NewMockMessageRepositoryInterface creates a new mock instance
func NewMockMessageRepositoryInterface(ctrl *gomock.Controller) *MockMessageRepositoryInterface {
	mock := &MockMessageRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageRepositoryInterface) EXPECT() *MockMessageRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertMessage mocks base method
func (m *MockMessageRepositoryInterface) InsertMessage(ctx context.Context, message *messages.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMessage indicates an expected call of InsertMessage
func (mr *MockMessageRepositoryInterfaceMockRecorder) InsertMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).InsertMessage), ctx, message)
}

// GetAllMessages mocks base method
func (m *MockMessageRepositoryInterface) GetAllMessages(ctx context.Context) ([]*messages.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages", ctx)
	ret0, _ := ret[0].([]*messages.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetAllMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetAllMessages), ctx)
}
